#!/bin/bash

IFS=$'\n'

PATH="$(./_sharedresources 'ffmpeg' 'youtubedl')"

# Workflow Environment Variables
readonly wev_downdir="$(sed 's/^~/${HOME}/' <<< "${download_dir}")"
readonly wev_watchlist_downdir="$(sed 's/^~/${HOME}/' <<< "${watchlist_download_dir}")"

# Parse query
full_query="${1}"
url="$(awk '{ print $1 }' <<< "${full_query}")"
media_type="$(awk '{ print $2 }' <<< "${full_query}")"
watchlist_bool="$(awk '{ gsub(".*_", "", $3); print $3 }' <<< "${full_query}")"
playlist_bool="$(awk '{ gsub(".*_", "", $4); print $4 }' <<< "${full_query}")"

# Global options for downloads
# File format is forced for consistency between gettitle and getfile
if [[ "${media_type}" == 'video' ]]; then
  subs_options=(--all-subs --embed-subs)
  file_format=(--format bestvideo[ext=mp4]+bestaudio[ext=m4a]/best)
else
  subs_options=()
  file_format=(--extract-audio --audio-quality 0 --audio-format "${audio_format:-best}")
fi

# Set file naming template depending on if downloading playlist
if [[ "${playlist_bool}" == 'true' ]]; then
  playlist_options='--yes-playlist'
  title_template='%(playlist)s/%(playlist_index)s-%(title)s.%(ext)s'
else
  playlist_options='--no-playlist'
  title_template='%(title)s.%(ext)s'
fi

function notification {
  ./Notificator.app/Contents/Resources/Scripts/notificator --message "${1}" --title "${alfred_workflow_name}"
}

function gettitle {
  # File location
  if [[ "${playlist_bool}" == 'true' ]]; then
    filename="$(dirname "$(youtube-dl --get-filename --ignore-errors "${file_format[@]}" "${playlist_options}" --output "${downdir}/${title_template}" "${url}" | head -1)")"
  else
    filename="$(youtube-dl --get-filename --ignore-errors "${file_format[@]}" "${playlist_options}" --output "${downdir}/${title_template}" "${url}")"
  fi

  # Title
  title="$(basename "${filename%.*}")"

  # Check if url is valid
  if [[ -z "${filename}" ]]; then
    notification 'The url is invalid'
    exit 1
  else
    notification "Downloading “${title}”"
  fi
}

function getfile {
  progressfile='/tmp/downvidprogress'

  youtube-dl --newline "${subs_options[@]}" --ignore-errors "${file_format[@]}" "${playlist_options}" --output "${downdir}/${title_template}" "${url}" > "${progressfile}"

  # Add metadata
  xmlencodedurl="$(perl -MHTML::Entities -CS -pe'$_ = encode_entities($_, q{&<>"'\''})' <<< "${url}")"
  xattr -w com.apple.metadata:kMDItemWhereFroms '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><array><string>'"${xmlencodedurl}"'</string></array></plist>' "${filename}"

  # xattr seems to return before the action is complete, not giving enough time for the file to have the attribute before sending to WatchList, so only continue after the attribute is present
  until mdls -raw -name kMDItemWhereFroms "${filename}" | grep --quiet --invert-match '(null)'; do
    sleep 1
  done

  rm "${progressfile}"
}

# Download
echo -n "${full_query}" > '/tmp/downvidcurrentquery'

if [[ "${watchlist_bool}" == 'true' ]]; then
  downdir="${wev_watchlist_downdir}"
  gettitle
  getfile
  osascript -e "tell application id \"com.runningwithcrayons.Alfred\" to run trigger \"add_file_to_watchlist\" in workflow \"com.vitorgalvao.alfred.watchlist\" with argument \"${filename}\""
else
  downdir="${wev_downdir}"
  gettitle
  getfile
fi

notification "Downloaded “${title}”"
